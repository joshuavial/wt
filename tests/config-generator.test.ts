import { describe, it, expect } from 'vitest';
import { ConfigGenerator, ConfigData } from '../src/config-generator';

describe('ConfigGenerator', () => {
  describe('toString', () => {
    it('should generate a basic config file', () => {
      const config: ConfigData = {
        startContainers: true,
        portOffsetIncrement: 10,
        envFiles: [],
        portMappings: [],
        containerNames: [],
        fileUpdates: []
      };

      const generator = new ConfigGenerator(config);
      const output = generator.toString();

      expect(output).toContain('# Generated by wt init');
      expect(output).toContain('START_CONTAINERS=true');
      expect(output).toContain('PORT_OFFSET_INCREMENT=10');
    });

    it('should include ENV_FILES when provided', () => {
      const config: ConfigData = {
        startContainers: false,
        portOffsetIncrement: 20,
        envFiles: ['.env', 'admin/.env', 'client/.env'],
        portMappings: [],
        containerNames: [],
        fileUpdates: []
      };

      const generator = new ConfigGenerator(config);
      const output = generator.toString();

      expect(output).toContain('ENV_FILES=(');
      expect(output).toContain('    ".env"');
      expect(output).toContain('    "admin/.env"');
      expect(output).toContain('    "client/.env"');
      expect(output).toContain(')');
    });

    it('should include PORT_MAPPINGS when provided', () => {
      const config: ConfigData = {
        startContainers: true,
        portOffsetIncrement: 10,
        envFiles: [],
        portMappings: [
          { variable: 'API_PORT', port: 3000 },
          { variable: 'CLIENT_PORT', port: 3001 }
        ],
        containerNames: [],
        fileUpdates: []
      };

      const generator = new ConfigGenerator(config);
      const output = generator.toString();

      expect(output).toContain('PORT_MAPPINGS=(');
      expect(output).toContain('    "API_PORT:3000"');
      expect(output).toContain('    "CLIENT_PORT:3001"');
    });

    it('should include CONTAINER_NAMES when provided', () => {
      const config: ConfigData = {
        startContainers: true,
        portOffsetIncrement: 10,
        envFiles: [],
        portMappings: [],
        containerNames: [
          { variable: 'DB_CONTAINER', template: '{{WORKTREE_NAME}}-db' },
          { variable: 'API_CONTAINER', template: '{{PROJECT_NAME}}-{{WORKTREE_NAME}}-api' }
        ],
        fileUpdates: []
      };

      const generator = new ConfigGenerator(config);
      const output = generator.toString();

      expect(output).toContain('CONTAINER_NAMES=(');
      expect(output).toContain('    "DB_CONTAINER:{{WORKTREE_NAME}}-db"');
      expect(output).toContain('    "API_CONTAINER:{{PROJECT_NAME}}-{{WORKTREE_NAME}}-api"');
    });

    it('should include FILE_UPDATES with different types', () => {
      const config: ConfigData = {
        startContainers: true,
        portOffsetIncrement: 10,
        envFiles: [],
        portMappings: [],
        containerNames: [],
        fileUpdates: [
          {
            file: '.env',
            type: 'env_vars',
            spec: 'API_PORT,CLIENT_PORT'
          },
          {
            file: 'docker-compose.yml',
            type: 'replace',
            spec: '',
            searchPattern: 'myapp',
            replacement: '{{WORKTREE_NAME}}-myapp'
          }
        ]
      };

      const generator = new ConfigGenerator(config);
      const output = generator.toString();

      expect(output).toContain('FILE_UPDATES=(');
      expect(output).toContain('    ".env|env_vars|API_PORT,CLIENT_PORT"');
      expect(output).toContain('    "docker-compose.yml|replace|myapp|{{WORKTREE_NAME}}-myapp"');
    });
  });

  describe('formatPortMappingsDisplay', () => {
    it('should format port mappings for display', () => {
      const mappings = [
        { variable: 'API_PORT', port: 3000 },
        { variable: 'DB_PORT', port: 5432 }
      ];

      const formatted = ConfigGenerator.formatPortMappingsDisplay(mappings);

      expect(formatted).toEqual([
        'API_PORT = 3000',
        'DB_PORT = 5432'
      ]);
    });
  });

  describe('generateContainerTemplate', () => {
    it('should replace project name with template variables', () => {
      const template = ConfigGenerator.generateContainerTemplate('myproject-db', 'myproject');

      expect(template).toBe('{{PROJECT_NAME}}-{{WORKTREE_NAME}}-db');
    });

    it('should prepend worktree name if project name not found', () => {
      const template = ConfigGenerator.generateContainerTemplate('postgres-db');

      expect(template).toBe('{{WORKTREE_NAME}}-postgres-db');
    });
  });

  describe('generateEnvVarsSpec', () => {
    it('should join port variables with commas', () => {
      const spec = ConfigGenerator.generateEnvVarsSpec(['API_PORT', 'CLIENT_PORT', 'DB_PORT']);

      expect(spec).toBe('API_PORT,CLIENT_PORT,DB_PORT');
    });
  });
});